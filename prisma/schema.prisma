generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String?  @unique
  name  String?
  password String?
  confirmationCode String?
  createdAt   DateTime @default(now())
  role String?
  state String?
  imageProfle String?
  gender String?
  entrepriseInfo Entreprise?
  reprisentativeLegal Legalrepresentative?
  locationUser Location?
  products Product[]
  storeuser Storeuser[]
  favoritList Favoritlist[]
}


model Location {
  id    Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  country String?
  rueAdress String?
  commune String?
  postalCode String?
  phoneNumber Int?
}


model Entreprise {
  id    Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  imageStatus String?
  entrepriseType String?
  raisonSociale String?
  numberSirene String?
  certificatEntreprise String?
  tvaNumber String?
  pays String?
  stateEntreprise String?
  commune String?
  postalCode String?
  rueNumber String?
  industryType String?
  businessManager String?
  certificatType String?
  certificatNumber String?
  entreprisePhoneNumber String?
} 

model Legalrepresentative {
  id    Int     @id @default(autoincrement())
  user   User    @relation(fields: [userlegalId], references: [id])
  userlegalId Int     @unique
  completeName String?
  nationality String?
  nativeCountry String?
  birthday String?
  pays String?
  state String?
  commune String?
  postalCode String?
  certificatResidence String?
  identityType String?
  identityTypeNumber String?
  identityImages String?
  legalPhoneNumber String?
  expireIdentity String?
  

}


model Product {
  id      Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  title String?
  price   Int?
  properties String?
  solde Int?
  prixlivraison Int?
  templivraison Int?
  quantity Int?
  category String?
  description String?
  descriptiontitle1 String?
  descriptiontitle2 String?
  descriptiontitle3 String?
  descriptiondetail1 String?
  descriptiondetail2 String?
  descriptiondetail3 String?
  likeProduct Int? @default(0)
  images  Image[]
  property Property[]
  store Storeuser[]
  favoritList Favoritlist[]
}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String?
  color     String?
  productId    Int
  product      Product     @relation(fields: [productId], references: [id])
}

model Property {
  id        Int      @id @default(autoincrement())
  detailsName     String
  quantity     Int
  productId    Int
  product      Product     @relation(fields: [productId], references: [id])
}




model Storeuser {
  id      Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int       
  createdAt   DateTime @default(now())
  colorProduct String?
  propertyType String?
  quantity Int
  imageUrl String?
  product Product   @relation(fields: [productstoreId], references: [id]) 
  productstoreId Int 
  productStoreName String?
  productUserStoreId Int?  
}


model Favoritlist {
  id      Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int     
  createdAt   DateTime @default(now())
  product Product   @relation(fields: [productfavoritId], references: [id]) 
  productfavoritId Int 

}